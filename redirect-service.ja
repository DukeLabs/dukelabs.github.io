// URL Redirect Tracker

// Function to track redirects using an external API service
async function trackRedirects(url) {
    try {
        // Validate URL format
        if (!url.startsWith('http://') && !url.startsWith('https://')) {
            url = 'https://' + url;
        }
        
        // Initialize tracking variables
        const redirectChain = [];
        let currentUrl = url;
        let redirectCount = 0;
        const MAX_REDIRECTS = 10; // Safety limit to prevent infinite loops
        
        console.log(`Starting with URL: ${currentUrl}`);
        redirectChain.push(currentUrl);
        
        // Use the unshorten.me API to track redirects
        // This is a public API that handles CORS and returns redirect information
        const apiUrl = `https://unshorten.me/json/${encodeURIComponent(currentUrl)}`;
        const response = await fetch(apiUrl);
        
        if (!response.ok) {
            throw new Error(`API error: ${response.status}`);
        }
        
        const data = await response.json();
        
        // Check if the URL was redirected
        if (data.success && data.resolved_url !== currentUrl) {
            redirectCount = 1; // At minimum, there was one redirect
            redirectChain.push(data.resolved_url);
            
            // If the chain has intermediate steps, add them
            if (data.chains && Array.isArray(data.chains) && data.chains.length > 0) {
                // Remove any duplicates with the original or final URL
                const intermediateChain = data.chains.filter(
                    chainUrl => chainUrl !== currentUrl && chainUrl !== data.resolved_url
                );
                
                if (intermediateChain.length > 0) {
                    // Insert the intermediate steps before the final URL
                    redirectChain.splice(1, 0, ...intermediateChain);
                    redirectCount = redirectChain.length - 1; // Update the count
                }
            }
            
            return {
                originalUrl: url,
                finalUrl: data.resolved_url,
                redirectCount: redirectCount,
                redirectChain: redirectChain,
                status: 'success'
            };
        } else {
            // No redirects found
            return {
                originalUrl: url,
                finalUrl: url,
                redirectCount: 0,
                redirectChain: [url],
                status: 'success'
            };
        }
    } catch (error) {
        console.error(`Error tracking redirects: ${error.message}`);
        return {
            originalUrl: url,
            finalUrl: null,
            redirectCount: 0,
            redirectChain: [],
            status: 'error',
            errorMessage: error.message
        };
    }
}

// DOM elements
const urlInput = document.getElementById('urlInput');
const trackButton = document.getElementById('trackButton');
const clearButton = document.getElementById('clearButton');
const pasteButton = document.getElementById('pasteButton');
const loadingElem = document.getElementById('loading');
const resultsElem = document.getElementById('results');
const historySection = document.getElementById('history');
const historyList = document.getElementById('historyList');
const clearHistoryButton = document.getElementById('clearHistoryButton');

// Search history management with localStorage
let searchHistory = [];
try {
    const savedHistory = localStorage.getItem('redirectTrackerHistory');
    if (savedHistory) {
        searchHistory = JSON.parse(savedHistory);
    }
} catch (e) {
    console.log('localStorage not available, using session memory only');
}

// Function to save URL to history
function saveToHistory(url, finalUrl) {
    const historyItem = {
        originalUrl: url,
        finalUrl: finalUrl,
        timestamp: new Date().toISOString()
    };
    
    // Add to the beginning of the array
    searchHistory.unshift(historyItem);
    
    // Limit history to 10 items
    if (searchHistory.length > 10) {
        searchHistory = searchHistory.slice(0, 10);
    }
    
    // Try to save to localStorage
    try {
        localStorage.setItem('redirectTrackerHistory', JSON.stringify(searchHistory));
    } catch (e) {
        console.log('Could not save to localStorage');
    }
    
    // Update history display
    updateHistoryDisplay();
}

// Function to update history display
function updateHistoryDisplay() {
    if (searchHistory.length === 0) {
        historySection.style.display = 'none';
        return;
    }
    
    historySection.style.display = 'block';
    historyList.innerHTML = '';
    
    searchHistory.forEach((item) => {
        const historyItem = document.createElement('li');
        historyItem.className = 'history-item';
        historyItem.setAttribute('data-url', item.originalUrl);
        
        const timestamp = new Date(item.timestamp);
        const formattedTime = timestamp.toLocaleString();
        
        historyItem.innerHTML = `
            <div class="history-url">${item.originalUrl}</div>
            <div class="history-time">${formattedTime}</div>
        `;
        
        historyItem.addEventListener('click', () => {
            urlInput.value = item.originalUrl;
            trackRedirectsFromInput();
        });
        
        historyList.appendChild(historyItem);
    });
}

// Function to display results
function displayResults(redirectInfo) {
    resultsElem.style.display = 'block';
    resultsElem.innerHTML = '';
    
    const resultCard = document.createElement('div');
    resultCard.className = 'result-card';
    
    // Original URL
    const originalUrlElem = document.createElement('div');
    originalUrlElem.className = 'result-item';
    originalUrlElem.innerHTML = `
        <div class="result-label">Original URL</div>
        <div class="url-display">
            <a href="${redirectInfo.originalUrl}" target="_blank">${redirectInfo.originalUrl}</a>
        </div>
    `;
    resultCard.appendChild(originalUrlElem);
    
    // Final URL
    const finalUrlElem = document.createElement('div');
    finalUrlElem.className = 'result-item';
    
    if (redirectInfo.status === 'success') {
        finalUrlElem.innerHTML = `
            <div class="result-label">
                <span class="success-indicator"></span>
                Final Destination URL
            </div>
            <div class="url-display">
                <a href="${redirectInfo.finalUrl}" target="_blank">${redirectInfo.finalUrl}</a>
            </div>
        `;
        
        // Save to history only if successful
        saveToHistory(redirectInfo.originalUrl, redirectInfo.finalUrl);
    } else {
        finalUrlElem.innerHTML = `
            <div class="error-msg">
                <strong>Error:</strong> ${redirectInfo.errorMessage}
            </div>
        `;
    }
    
    resultCard.appendChild(finalUrlElem);
    
    // Redirect count
    const redirectCountElem = document.createElement('div');
    redirectCountElem.className = 'result-item';
    redirectCountElem.innerHTML = `
        <div class="result-label">Number of redirects</div>
        <div>${redirectInfo.redirectCount}</div>
    `;
    resultCard.appendChild(redirectCountElem);
    
    // Redirect chain
    if (redirectInfo.redirectChain.length > 1) {
        const chainElem = document.createElement('div');
        chainElem.className = 'redirect-chain';
        chainElem.innerHTML = `<div class="chain-title">Redirect Chain</div>`;
        
        const chainList = document.createElement('ul');
        chainList.className = 'chain-list';
        
        redirectInfo.redirectChain.forEach((chainUrl, index) => {
            const chainItem = document.createElement('li');
            chainItem.className = 'chain-item';
            
            chainItem.innerHTML = `
                <div class="step-number">${index + 1}</div>
                <div class="step-url">
                    <a href="${chainUrl}" target="_blank">${chainUrl}</a>
                </div>
            `;
            
            chainList.appendChild(chainItem);
        });
        
        chainElem.appendChild(chainList);
        resultCard.appendChild(chainElem);
    }
    
    resultsElem.appendChild(resultCard);
}

// Function to track redirects from input
async function trackRedirectsFromInput() {
    const url = urlInput.value.trim();
    if (!url) {
        return;
    }
    
    // Show loading state
    loadingElem.style.display = 'flex';
    resultsElem.style.display = 'none';
    
    try {
        const redirectInfo = await trackRedirects(url);
        
        // Hide loading and display results
        loadingElem.style.display = 'none';
        displayResults(redirectInfo);
    } catch (error) {
        loadingElem.style.display = 'none';
        
        // Display error
        resultsElem.style.display = 'block';
        resultsElem.innerHTML = `
            <div class="error-msg">
                <strong>Error:</strong> ${error.message}
            </div>
        `;
    }
}

// Event listeners
trackButton.addEventListener('click', trackRedirectsFromInput);

urlInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        trackRedirectsFromInput();
    }
});

clearButton.addEventListener('click', () => {
    urlInput.value = '';
    resultsElem.style.display = 'none';
    urlInput.focus();
});

pasteButton.addEventListener('click', async () => {
    try {
        const clipboardText = await navigator.clipboard.readText();
        urlInput.value = clipboardText;
        urlInput.focus();
    } catch (error) {
        console.error('Failed to read clipboard:', error);
        alert('Unable to access clipboard. Please paste manually or check browser permissions.');
    }
});

clearHistoryButton.addEventListener('click', () => {
    searchHistory = [];
    try {
        localStorage.setItem('redirectTrackerHistory', JSON.stringify(searchHistory));
    } catch (e) {
        console.log('Could not clear localStorage');
    }
    updateHistoryDisplay();
});

// Initialize history display
updateHistoryDisplay();
